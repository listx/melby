# Copyright 2024 Linus Arver
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#+title: melby-client (Rust)
#+PROPERTY: header-args :noweb no-export

* Code overview

While the Haskell client above does work, the [[https://github.com/higherkindness/mu-haskell][=mu-haskell=]] library it depends on
appears to be abandoned. So we need a backup plan in case that library does turn
out to be abandoned forever.

Here we use Rust to build an equivalent client. We start with =Cargo.toml= for
defining dependencies.

See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html.

#+name: rust-client-Cargo.toml
#+caption: Cargo.toml for client-rust
#+begin_src toml :tangle client-rust/Cargo.toml
[package]
name = "melbyc-rust"
description = "melby client, written in Rust"
version = "0.1.0"
edition = "2021"

[dependencies]
tonic = "0.11"
tokio = { version = "1.0", features = ["macros", "rt-multi-thread"] }
prost = "0.12"
clap = { version = "4.5.4", features = ["derive"]}
config = { version = "0.14", features = ["yaml"]}

[build-dependencies]
tonic-build = "0.11"

[[bin]]
name = "melbyc-rust"
path = "src/main.rs"

[profile.release]
# Strip all symbols.
strip = true
#+end_src

And here's the =.gitignore= for this client.

#+begin_src text :tangle client-rust/.gitignore
.cargo

target
#+end_src

Here's the =Makefile= for building and testing.

#+begin_src makefile :tangle client-rust/Makefile
build_dev:
	cargo build
.PHONY: build_dev

build_prod:
	cargo build --release
.PHONY: build_prod

test:
	cargo test
.PHONY: test
#+end_src

Here's the file for protobuf code generation. The =build.rs= name is a special
name that Cargo recognizes automatically.

#+name: build.rs
#+caption: build.rs for client-rust
#+begin_src rust :tangle client-rust/build.rs
use std::error::Error;

fn main() -> Result<(), Box<dyn Error>> {
    tonic_build::compile_protos("proto/melby_client.proto")?;
    tonic_build::configure()
    .build_server(false)
    .out_dir("src/grpc_generated")  // you can change the generated code's location
    .compile(
        &["proto/melby_client.proto"],
        &["proto"], // specify the root location to search proto dependencies
    ).unwrap();

    Ok(())
}
#+end_src

The code above generates =src/grpc_generated/melby_client.rs=. In order to
import it as a module, we have to export it as part of the =grpc_generated=
package. We do that below.

#+name: mod.rs
#+caption: mod.rs for generated code
#+begin_src rust :tangle client-rust/src/grpc_generated/mod.rs
pub mod melby_client;
#+end_src

** Main function

#+name: rust-client-main.rs
#+caption: main.rs for client-rust
#+begin_src rust :tangle client-rust/src/main.rs
__NREF__client-rust--imports
__NREF__client-rust--option-handling
__NREF__client-rust--main
__NREF__client-rust--business-logic
#+end_src

Basic imports.

#+header: :noweb-ref __NREF__client-rust--imports
#+begin_src rust
use std::collections::HashMap;
use std::error::Error;
use std::path::PathBuf;
use clap::{Parser, Subcommand};
#+end_src

Import generated gRPC code. These are built by =build.rs=.

#+header: :noweb-ref __NREF__client-rust--imports
#+begin_src rust
pub mod grpc_generated;
use grpc_generated::melby_client::view_client::ViewClient;
use grpc_generated::melby_client::ViewRequest;
#+end_src

Global options.

#+header: :noweb-ref __NREF__client-rust--option-handling
#+begin_src rust
#[derive(Parser)]
#[command(version, about, long_about = None)]
/// Global options (applies to all subcommands).
struct Cli {
    /// Config file path.
    #[arg(short, long,
          value_name = "LUA_CONFIG_FILE", default_value = "~/.melby/melby.lua")]
    config: PathBuf,

    /// Inline Lua config if you want to test out small(er) snippets of code
    /// directly without having to write a LUA_CONFIG_FILE on disk somewhere.
    /// Currently ignored by the daemon.
    #[arg(short = 'r', long,
          value_name = "RAW_INLINE_LUA_CONFIG", default_value = "")]
    config_raw: String,

    /// Port of melbyd (presumed to be running on localhost).
    #[arg(short, long, default_value_t = 50051)]
    melbyd_port: u16,

    /// Subcommands.
    #[command(subcommand)]
    command: Option<Commands>,
}
#+end_src

Subcommands. There's only 1 right now, but we'll have more in the future.

#+header: :noweb-ref __NREF__client-rust--option-handling
#+begin_src rust
/// Subcommands and their options.
#[derive(Subcommand)]
enum Commands {
    View {
        #[arg(short, long, default_value_t = 0)]
        shell_pid: u32,
    },
}
#+end_src

Entrypoint.

#+header: :noweb-ref __NREF__client-rust--main
#+begin_src rust
#[tokio::main]
async fn main() -> Result<(), Box<dyn Error>> {
    let cli = Cli::parse();

    match &cli.command {
        Some(Commands::View { shell_pid }) => {
            view(&cli, *shell_pid).await?;
        }
        None => {
            ()
        }
    }

    Ok(())
}
#+end_src

View the output of running the Lua configuration inside melbyd.

#+header: :noweb-ref __NREF__client-rust--business-logic
#+begin_src rust
async fn view(cli: &Cli, shell_pid: u32) -> Result<(), Box<dyn Error>> {
    let url = format!("http://127.0.0.1:{0}", cli.melbyd_port);
    let mut client = ViewClient::connect(url).await?;

    // FIXME: Instead of slurping up everything, only slurp up
    // an "allowlist" of known ENV vars we want to feed into the server. This
    // allowlist could be defined in settings.yml or even as an additive list of
    // flags. We could do the additive list of flags first and then move to
    // settings.yml in the future if there are just too many flags.
    let mut env_vars: HashMap<String, String> = HashMap::new();
    for (k, v) in std::env::vars() {
        env_vars.insert(k, v);
    }

    let req = ViewRequest {
        config_path: cli.config.display().to_string(),
        config: cli.config_raw.to_string(),
        env_vars: env_vars,
        shell_pid: shell_pid.to_string(),
    };

    let request = tonic::Request::new(req);
    let response = client.get_view(request).await?;

    println!("{}", response.get_ref().view);

    Ok(())
}
#+end_src

* Packaging

#+begin_src nix :tangle client-rust/melby-client-rust.nix
{ sources ? import ../package/nix/sources.nix }:
let
  # Overlays
  oxalica-rust-overlay = import sources.rust-overlay;
  # Build rust crates.
  naersk = pkgs.callPackage sources.naersk {
    cargo = pkgs.rust-bin.stable.latest.minimal;
    rustc = pkgs.rust-bin.stable.latest.minimal;
  };
  # The final "pkgs" attribute with all the bells and whistles of our overlays.
  pkgs = import sources.nixpkgs {
    overlays = [
      oxalica-rust-overlay
    ];
  };
in
  naersk.buildPackage {
    src = ./.;
    copyBins = true;
    copyTarget = false;
    # See https://pyo3.rs/v0.14.2/building_and_distribution.html#macos (by way
    # of https://github.com/PyO3/pyo3/issues/1800#issuecomment-1071890916).
    CARGO_BUILD_RUSTFLAGS = pkgs.lib.optional
      pkgs.stdenv.isDarwin
      "-C link-arg=-undefined -C link-arg=dynamic_lookup";
    buildInputs = [
      pkgs.protobuf
    ];
  }
#+end_src
