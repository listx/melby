#!/usr/bin/env bash
set -euo pipefail

SCRIPT_ROOT="$(dirname "$(realpath "$0")")"

# Files which are tracked outside of our tangling step, but for legitimate
# reasons (generated code, symlinks to dependencies, or LICENSE files,
# typically).
known_not_tangled=(
    # Generated by Git itself.
    .gitmodules

    # Legalese.
    LICENSE

    # Build system metadata.
    client-rust/Cargo.lock

    # Copied over from toplevel proto in Makefile.
    client-rust/proto/melby_client.proto

    # Generated by client-rust/build.rs.
    client-rust/src/grpc_generated/melby_client.rs

    # Legalese, same as toplevel (copied over in Makefile).
    client/LICENSE

    # Copied over from toplevel proto in Makefile.
    client/lib/MelbyClient/melby_client.proto

    # Needed for Haskell+Stack integration.
    client/stack.nix

    # Build system metadata.
    client/stack.yaml.lock

    # Generated gRPC stubs (Elixir).
    daemon/lib/generated/melby.pb.ex
    daemon/lib/generated/melby_client.pb.ex
    daemon/lib/generated/melby_daemon.pb.ex
    daemon/lib/generated/melby_renderer.pb.ex

    # Build system metadata.
    daemon/lib/melbyd/nifs/Cargo.lock

    # Legalese.
    daemon/lib/melbyd/renderer/LICENSE

    # Copied over from toplevel proto in Makefile.
    daemon/lib/melbyd/renderer/lib/MelbyRenderer/melby_renderer.proto

    # Needed for Haskell+Stack integration.
    daemon/lib/melbyd/renderer/stack.nix

    # Build system metadata.
    daemon/lib/melbyd/renderer/stack.yaml.lock

    # Build system metadata.
    daemon/mix.lock

    # Generated by mix2nix.
    daemon/mix.nix

    # Generated SVG output (TikZ->PDF->SVG).
    image/architecture-overall.svg

    # Symlinks to Lilac.
    lilac.css
    lilac.js
    lilac.theme

    # Generated by Niv.
    package/nix/sources.json
    package/nix/sources.nix

    # Symlink to Lilac.
    syntax-highlighting.css
)

# List all files we explicitly tangle from Org files.
tangled_files()
{
    git -C "${SCRIPT_ROOT}" grep -P '^#\+begin_\w+ .+? :tangle' -- '*.org' \
        | sed 's/^.\+:tangle \(\S\+\).*$/\1/' \
        | sort
}

# List all files checked into version control.
tracked_files()
{
    git -C "${SCRIPT_ROOT}" ls-tree -r HEAD \
        | awk '{print $2,$4}' \
        | grep '^blob' \
        | grep -v '\.\(html\|org\)$' \
        | awk '{print $2}'
}

main()
{
    >&2 echo -n "$0: checking tangled vs tracked files... "
    # Combine tangled files and those which are tracked but not tangled. This
    # list should match the sum of all tangled files (modulo HTML and Org
    # files).
    if diff -u \
        <(printf '%s\n' "$(tangled_files)" "${known_not_tangled[@]}" | sort) \
        <(tracked_files); then

        >&2 echo "OK"
    else
        >&2 echo "$0: failed"
    fi
}

main "$@"
