# Copyright 2023 Linus Arver
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#+title: melby images
#+PROPERTY: header-args :noweb no-export
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="syntax-highlighting.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style.css" />

* Architecture

This svg file is not stable (changes every time we generate it).

It appears that it generates the wrong thing as SVG (the SVG itself is valid but the shapes displayed are parts of the text strings used for generating the SVG).

Note that this pdf generation works fine. However if we specif SVG it doesn't work.

We can now convert the minimal 1-page PDF into an SVG using either [[https://github.com/mgieseki/dvisvgm][dvisvgm]] or [[https://github.com/dawbarton/pdf2svg][pdf2svg]]. Currently (September 2022) there is [[https://github.com/mgieseki/dvisvgm/issues/183][a bug]] with dvisvgm so we have to use the latter. Ideally Org mode can take care of this but currently it appears to be buggy, so we perform the manual conversion ourselves. We might even want to create a separate Org mode doc for all of the svg image processing. FIXME

FIXME: Also, we need to basically do 2 passes --- run emacs to generate the HTML and all PDF (images) files, and a second pass with pdf2svg to generate the svgs.

#+name: architecture-overall
#+caption: Generates =image/architecture-overall.pdf=.
#+header: :eval no
#+header: :results file drawer
#+header: :file image/architecture-overall.pdf
#+header: :imagemagick yes
#+header: :headers '("\\usepackage{tikz}" "\\usepackage[default]{sourcesanspro}")
#+begin_src latex
% FIXME: we have to run C-c C-c to generate the pdf file. Ideally we'd just run it from a Makefile or something.
% Source: https://www.overleaf.com/learn/latex/LaTeX_Graphics_using_TikZ%3A_A_Tutorial_for_Beginners_(Part_3)%E2%80%94Creating_Flowcharts.
\usetikzlibrary{shapes.geometric, arrows}
\tikzstyle{startstop} = [rectangle, rounded corners, minimum width=3cm, minimum height=1cm,text centered, draw=black, fill=red!30]
\tikzstyle{io} = [trapezium, trapezium left angle=70, trapezium right angle=110, minimum width=3cm, minimum height=1cm, text centered, draw=black, fill=blue!30]
\tikzstyle{process} = [rectangle, minimum width=3cm, minimum height=1cm, text centered, text width=3cm, draw=black, fill=orange!30]
\tikzstyle{decision} = [diamond, minimum width=3cm, minimum height=1cm, text centered, draw=black, fill=green!30]
\tikzstyle{arrow} = [thick,->,>=stealth]
\begin{tikzpicture}[node distance=2cm]
\node (start) [startstop] {Start};
\node (in1) [io, below of=start] {Input};
\node (pro1) [process, below of=in1] {Process 1};
\node (dec1) [decision, below of=pro1, yshift=-0.5cm] {Decision 1};
\node (pro2a) [process, below of=dec1, yshift=-0.5cm] {Process 2a text text text text text text text text text text};
\node (pro2b) [process, right of=dec1, xshift=2cm] {Process 2b};
\node (out1) [io, below of=pro2a] {Output};
\node (stop) [startstop, below of=out1] {Stop};

\draw [arrow] (start) -- (in1);
\draw [arrow] (in1) -- (pro1);
\draw [arrow] (pro1) -- (dec1);
\draw [arrow] (dec1) -- node[anchor=east] {yes} (pro2a);
\draw [arrow] (dec1) -- node[anchor=south] {no} (pro2b);
\draw [arrow] (pro2b) |- (pro1);
\draw [arrow] (pro2a) -- (out1);
\draw [arrow] (out1) -- (stop);
\end{tikzpicture}
#+end_src

#+RESULTS: architecture-overall
:results:
[[file:image/architecture-overall.pdf]]
:end:


* Makefile

This is a Makefile for generating diagrams (SVG format).

#+name: image/Makefile
#+caption: =image/Makefile=
#+begin_src makefile :tangle image/Makefile :eval no
all: architecture-overall.svg
%.svg : %.pdf
	pdf2svg $< $@.uncropped.svg
	inkscape \
		--export-plain-svg \
		--export-margin=5 \
		--export-filename=$@ \
		--export-area-drawing \
		$@.uncropped.svg

.PHONY: all
#+end_src
