# Copyright 2023 Linus Arver
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#+title: melby images
#+PROPERTY: header-args :noweb no-export
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="syntax-highlighting.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style.css" />

* Templates

** LaTeX preamble for TikZ

Define custom wrappers for LaTeX files that define images. This way we don't
have to repeat ourselves as much.

#+header: :noweb-ref __NREF__begin_tikz
#+begin_src latex
\documentclass{article}
\usepackage[usenames]{color}
\usepackage{amsmath}
\usepackage{graphicx}
\usepackage{longtable}
\usepackage{wrapfig}
\usepackage{rotating}
\usepackage[normalem]{ulem}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{capt-of}
\pagestyle{empty}             % do not remove

% The settings below are copied from fullpage.sty
\setlength{\textwidth}{\paperwidth}
\addtolength{\textwidth}{-3cm}
\setlength{\oddsidemargin}{1.5cm}
\addtolength{\oddsidemargin}{-2.54cm}
\setlength{\evensidemargin}{\oddsidemargin}
\setlength{\textheight}{\paperheight}
\addtolength{\textheight}{-\headheight}
\addtolength{\textheight}{-\headsep}
\addtolength{\textheight}{-\footskip}
\addtolength{\textheight}{-3cm}
\setlength{\topmargin}{1.5cm}
\addtolength{\topmargin}{-2.54cm}
\usepackage{tikz}
\usepackage[default,oldstyle]{sourcesanspro}

% See https://tex.stackexchange.com/a/445446 which was used as a template for
% this diagram below.
\usetikzlibrary{
  arrows.meta,
  calc,
  shapes.geometric,
  shapes.symbols,
  fit,
  positioning}
\tikzset{
  module/.style={%
    fill=white,
    draw=black, rounded corners,
    % Minimum height is useful to take into account capital
    % letters and such that take up extra height.
    minimum height=7mm,
    align=center,
    font=\sffamily
  },
  user/.style={%
    shape=ellipse,
    fill=white,
    draw=black, rounded corners,
    % Minimum height is useful to take into account capital
    % letters and such that take up extra height.
    minimum height=7mm,
    align=center,
    font=\sffamily
  },
  arrowX/.style={%
    {Latex[length=2mm,width=2mm]}-{Latex[length=2mm,width=2mm]}
  },
  arrowL/.style={%
    {Latex[length=2mm,width=2mm]}-
  },
  arrowR/.style={%
    -{Latex[length=2mm,width=2mm]}
  }%
}

\begin{document}
\begin{tikzpicture}[thick,font=\sffamily,every label/.append
    style={font=\sffamily,align=center}]
#+end_src

The ending is not as interesting, but still important.

#+header: :noweb-ref __NREF__end_tikz
#+begin_src latex
\end{tikzpicture}
\end{document}
#+end_src

* Architecture

The SVG file we generate here is not deterministic (changes every time we
generate it).

It appears that it generates the wrong thing as SVG (the SVG itself is valid but
the shapes displayed are parts of the text strings used for generating the SVG).

Note that this pdf generation works fine. However if we specify SVG it doesn't
work.

We can now convert the minimal 1-page PDF into an SVG using either [[https://github.com/mgieseki/dvisvgm][dvisvgm]] or
[[https://github.com/dawbarton/pdf2svg][pdf2svg]]. Currently (September 2022) there is [[https://github.com/mgieseki/dvisvgm/issues/183][a bug]] with dvisvgm so we have to
use the latter. Ideally Org mode can take care of this but currently it appears
to be buggy, so we perform the manual conversion ourselves. We might even want
to create a separate Org mode doc for all of the SVG image processing.

FIXME: Also, we need to basically do 2 passes --- run emacs to generate the HTML
and all PDF (images) files, and a second pass with pdf2svg to generate the SVGs.

#+begin_src latex :tangle image/architecture-overall.tex
__NREF__begin_tikz

% Lua VMs. This is the "root" node as it does not reference anything
% else in terms of positioning.
\node[module, label={[yshift=3mm]Daemon\\(melbyd)}] (LuaVMs) {Lua VMs};
% Outer box around melbyd, which includes the LuaVMs.
\node[fit={(0,2) (LuaVMs) (0,-1)}, draw, rounded corners,
  inner xsep=5mm, inner ysep=-\pgflinewidth] (melbydOutline) {};
\node[module, left=1.5cm of melbydOutline] (melbyr) {Renderer\\(melbyr)};

% We could just use "right=1.5cm of melbydOutline" here but use calc's syntax
% for computing a coordinate combined with a (X,Y) delta for future reference in
% case we need to fine-tune an illustration.
\node[module] at ($(melbydOutline) + (3.5cm,0cm)$) (melbyc) {Client\\(melbyc)};
\node[module, right=1cm of melbyc] (Configs) {Configs\\(Lua)};
\node[user, below=1.5cm of melbyc] (User) {User};

\draw[arrowX] (melbyr)--(melbydOutline);
\draw[arrowX] (User)--(melbyc);
\draw[arrowL] (melbyc)--(Configs);
\draw[arrowX] (melbyc)--(melbydOutline);

__NREF__end_tikz
#+end_src

* Makefile

This is a Makefile for generating diagrams (SVG format).

#+name: image/Makefile
#+caption: =image/Makefile=
#+begin_src makefile :tangle image/Makefile :eval no
all: architecture-overall.svg
%.pdf: %.tex
	lualatex --halt-on-error $<
%.svg: %.pdf
	pdf2svg $< $@.uncropped.svg
	inkscape \
		--export-plain-svg \
		--export-margin=5 \
		--export-filename=$@ \
		--export-area-drawing \
		$@.uncropped.svg

.PHONY: all
#+end_src
