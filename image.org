# Copyright 2023 Linus Arver
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#+title: melby images
#+PROPERTY: header-args :noweb no-export
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="syntax-highlighting.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style.css" />

* Templates

** LaTeX preamble for TikZ

Define custom wrappers for LaTeX files that define images. This way we don't
have to repeat ourselves as much.

#+header: :noweb-ref __NREF__begin_tikz
#+begin_src latex
\documentclass[tikz]{standalone}
\usepackage[x11names]{xcolor}
\usepackage[default,oldstyle]{sourcesanspro}

% See https://tex.stackexchange.com/a/445446 which was used as a template for
% this diagram below.
\usetikzlibrary{
  arrows.meta,
  calc,
  shapes.geometric,
  shapes.symbols,
  fit,
  positioning}
\tikzset{
  module/.style={%
    fill=white,
    draw=black, rounded corners,
    % Minimum height is useful to take into account capital
    % letters and such that take up extra height.
    minimum height=7mm,
    align=center,
    font=\sffamily
  },
  user/.style={%
    shape=ellipse,
    fill=white,
    draw=black, rounded corners,
    % Minimum height is useful to take into account capital
    % letters and such that take up extra height.
    minimum height=7mm,
    align=center,
    font=\sffamily
  },
  arrowX/.style={%
    {Latex[length=2mm,width=2mm]}-{Latex[length=2mm,width=2mm]}
  },
  arrowL/.style={%
    {Latex[length=2mm,width=2mm]}-
  },
  arrowR/.style={%
    -{Latex[length=2mm,width=2mm]}
  }%
}

\begin{document}
\begin{tikzpicture}[thick,font=\sffamily,every label/.append
    style={font=\sffamily,align=center}]
#+end_src

The ending is not as interesting, but still important.

#+header: :noweb-ref __NREF__end_tikz
#+begin_src latex
\end{tikzpicture}
\end{document}
#+end_src

Thanks to the [[https://ctan.org/pkg/standalone?lang=en][standalone]] package, the PDF that's generated is only as big as the
image inside it. We can convert this PDF into SVG using [[https://github.com/mgieseki/dvisvgm][dvisvgm]].

* Architecture

#+begin_src latex :tangle image/architecture-overall.tex
__NREF__begin_tikz

% Lua VMs. This is the "root" node as it does not reference anything
% else in terms of positioning.
\node[module, label={[yshift=3mm]Daemon\\(melbyd)}] (LuaVMs) {Lua VMs};
% Outer box around melbyd, which includes the LuaVMs.
\node[fit={(0,2) (LuaVMs) (0,-1)}, draw, rounded corners,
  inner xsep=5mm, inner ysep=-\pgflinewidth] (melbydOutline) {};
\node[module, left=1.5cm of melbydOutline] (melbyr) {Renderer\\(melbyr)};

% We could just use "right=1.5cm of melbydOutline" here but use calc's syntax
% for computing a coordinate combined with a (X,Y) delta for future reference in
% case we need to fine-tune an illustration.
\node[module] at ($(melbydOutline) + (3.5cm,0cm)$) (melbyc) {Client\\(melbyc)};
\node[module, right=1cm of melbyc] (Configs) {Configs\\(Lua)};
\node[user, below=1.5cm of melbyc] (User) {User};

\draw[arrowX] (melbyr)--(melbydOutline);
\draw[arrowX] (User)--(melbyc);
\draw[arrowL] (melbyc)--(Configs);
\draw[arrowX] (melbyc)--(melbydOutline);

__NREF__end_tikz
#+end_src

* Makefile

This is a Makefile for generating diagrams (SVG format).

#+name: image/Makefile
#+caption: =image/Makefile=
#+begin_src makefile :tangle image/Makefile :eval no
all: architecture-overall.svg
%.pdf: %.tex
	lualatex --halt-on-error $<
%.svg: %.pdf
	dvisvgm --no-fonts --pdf $<

.PHONY: all
#+end_src
