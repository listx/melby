# Copyright 2023 Linus Arver
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#+title: Developer Manual
#+SETUPFILE: lilac.theme
#+PROPERTY: header-args :noweb no-export
#+OPTIONS: ^:{}
#+OPTIONS: H:5

* Tech stack

We use several programming languages: Elixir, Lua, Rust, and Haskell.

- *Elixir*: Elixir is the main language used in this project because of it
  leverages the famed Erlang runtime, known for its world-class reliability.
  Elixir is used for programming the base system, as well as testing all of the
  components together.
- *Lua*: Lua is used as our configuration language, because of its power and
  flexibility. Users must create a Lua configuration file in order to use Melby.
- *Rust*: Rust is used in some places where static typing and performance might
  come in handy. Typically it's used for smaller, pure (lacking side effects)
  functions.
- *Haskell*: Haskell is used for the Melby client binary =melbyc=, and also the
  =melbyr= rendering service. Haskell maximizes code maintainability and
  stability, and so it is the preferred language for building smaller
  independent components outside of the base (Elixir) system.

We also use [[https://en.wikipedia.org/wiki/Literate_programming][Literate Programming]] (LP). To this end, we use Emacs Org mode
(=*.org= files) as the source of truth. These files are /tangled/ into the above
languages for the application binaries. These same files are /woven/ to produce
HTML files for documentation (what you are reading now). We use several
languages for weaving:

- *Emacs Lisp*: We use Emacs Lisp to tame Emacs Org mode for LP. Emacs Org mode
  is used for LP in this project because it is probably the most flexible and
  widely-used LP system out there. LaTeX + Noweb is another possibility, but it
  was not chosen because Org mode by default looks reasonable in plaintext.
- *TikZ*: [[https://en.wikipedia.org/wiki/PGF/TikZ][PGF/TikZ]] is used for writing all of the diagrams and figures used for
  documentation. This is because TikZ is extremely stable, powerful, and
  flexible for creating diagrams of all sorts. It is also able to produce SVG
  files, which are required to generate diagrams of the highest quality.
- *HTML/CSS*: HTML and CSS power the documentation. Although PDF output can be
  very beautiful, HTML is simply more accessible and also does not require code
  listings to be broken across multiple pages.

If you are interested in helping to contribute back to Melby, see [[file:developer-manual.html#h-Contributing-to-Melby]["Contributing
to Melby" in the Developer Manual]].

* Lay of the land

[[./image/architecture-overall.svg]]

Melby uses a client/server architecture. There are two main parts:

#+begin_sidenote
=melbyd= is the daemon, which acts as a server in the client/server
architecture. We call it a daemon because it is expected to have direct access
to the local machine which is relevant to the client. This is unlike typical web
servers where the local machine characteristics of such servers are irrelevant
to clients.
#+end_sidenote

1. =melbyd=: The daemon (server), which itself is composed of two smaller pieces:
   a. The controller written in Elixir and Rust.
   b. The viewer written in Haskell. This is a separate server in its own right
      (a microservice).
2. =melbyc=: The client, written in Haskell. The client sends a request and
   receives a "view".

You may notice that the two parts of =melbyd= are the controller and viewer.
These parts are named this way to refer to the common [[https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller][Model-View-Controller]]
(MVC) pattern. One unusual deviation from the MVC pattern is that the client is
fully responsible for sending in the "template" for the view, as well as asking
the daemon what kind of data (Model) it would like to work with. The client does
this by sending in a Lua script.

So the entire flow is:

1. User writes a Lua script to specify what pieces of information it wants, and
   how it should be presented.
2. =melbyc= sends this script to =melbyd= for processing.
3. The =melbyd= controller gathers the necessary data (e.g., Git status) and
   sends it to the =melbyd= viewer (Haskell service) for generating the final
   view.
4. The view is sent back to =melbyc=, which then prints it to STDOUT.

* Overview of this manual

The developer manual consists of multiple parts for the following areas:

- The build system for Literate Programming (LP), which explains how LP is used
  in this project as well as how each Melby component is used. You may skip this
  section if you are only interested in Melby's business logic.
- The build system for packaging Melby, which explains how Melby can be packaged
  up using the Nix Package Manager. This is useful for developing Melby locally
  (setting up a development environment).
- melbyc: an overview of the client program that queries =melbyd= for information,
  to be displayed in a shell prompt (or anywhere else).
- melbyd: an overview of the Elixir service that accepts requests from =melbyc=
  (the client). This is where most of the "meat" of Melby business logic resides,
  and is perhaps the most interesting. One key area here is the use of [[https://github.com/rvirding/luerl][Luerl]] to
  enable Melby configuration using the Lua programming language. This also
  includes an overview of the Haskell =melbyr= service that performs string/data
  transformation and manipulation.

Each of these parts are included separately under their own top-level heading
below and prefixed with =Developer Manual: ...=.

* Build System for Literate Programming

#+include: "build-literate.org" :lines "16-"

* Build System for Packaging Melby

** Introduction

We use Nix for the build system. Nix allows us to package up Melby into an
installabe software unit, or package, as well as provide us a development
environment capable of building Melby from scratch.

*** What we must build

There are several pieces of software we need to build (compile from source):

1. melbyc (Haskell)
2. melbyr (Haskell)
3. melbyd (Elixir)
4. melbyd Nifs (Rust)

** Development environment

Developing is intimately tied to releasing. And of course, development must come
first before we can release. And so we discuss the development environment here.

We use Nix to set up the environment.

*** Nix shell

This is taken from [[https://github.com/tweag/haskell-stack-nix-example/blob/b9383e35416a2b0e21fbc97ed079538f9f395b6a/shell.nix#L1][here]].

Note that we first have to do =nix-shell --pure= in Melby's toplevel directory,
then =cd= into =melbyc= and only from here we are able to do =stack exec -- ghci=
to see the right version of GHC.

This is the main development shell and brings in all of our dependencies to
build all of our code. It's great for development and testing things out (e.g.,
running unit tests) for all of the various languages we use.

#+caption: shell.nix (toplevel dev environment)
#+begin_src nix :tangle shell.nix :eval no
let
  # Nixpkgs snapshot.
  sources = import ./package/nix/sources.nix;
  # Overlays
  oxalica-rust-overlay = import sources.rust-overlay;
  # Build rust crates.
  naersk = final: prev: {
    naersk = pkgs.callPackage sources.naersk
      {
        inherit sources;
      };
    };
  # The final "pkgs" attribute with all the bells and whistles of our overlays.
  pkgs = import sources.nixpkgs {
    overlays = [
      oxalica-rust-overlay
      naersk
    ];
  };

  # Wrap Stack to configure Nix integration and target the correct Stack-Nix
  # file
  #
  # - nix: Enable Nix support (use Stack's built-in Nix integration; this makes
  #   Stack populate the "ghc" variable in our nix/stack.nix file with the GHC
  #   version found in the stack.yaml file; this way we don't have to specify a
  #   GHC version in Nix (when we already define it transitively through
  #   specifying Stack's LTS version in stack.yaml)). This also makes it so that
  #   ghci is not available in the nix-shell; rather it can only be accessed
  #   through "stack exec -- ghci".
  #
  # - nix-pure: Do not pass environment variables, like `NIX_PATH`
  #
  # - nix-shell-file: Specify the Nix file to use (otherwise it uses `shell.nix`
  #   by default)
  #
  # Vanilla (unwrapped) stack is available as `.stack-wrapped`, courtesy of
  # pkgs.symlinkJoin.
  stack-wrapped = pkgs.symlinkJoin {
    name = "stack";
    paths = [ pkgs.stack ];
    buildInputs = [ pkgs.makeWrapper ];
    postBuild = ''
      wrapProgram $out/bin/stack \
        --add-flags "\
          --nix \
          --nix-pure \
          --system-ghc \
          --no-install-ghc \
          --nix-shell-file=./stack.nix \
        "
    '';
  };

  protoc-gen-elixir = pkgs.callPackage ./package/protoc-gen-elixir.nix {};
  darwin-cargo-build-rustflags = pkgs.lib.attrsets.optionalAttrs pkgs.stdenv.isDarwin {
    CARGO_BUILD_RUSTFLAGS = "-C link-arg=-undefined -C link-arg=dynamic_lookup";
  };
  macOS-security =
    # Make `/usr/bin/security` available in `PATH`, which is needed for stack
    # on darwin which calls this binary to find certificates. See
    # https://github.com/tweag/rules_haskell/commit/31171a520f49f263895112678ac93c7ed958ead1.
    pkgs.writeScriptBin "security" ''exec /usr/bin/security "$@"'';
in

# This is our development shell.
pkgs.mkShell ({
  buildInputs = [
    # Haskell
    stack-wrapped
    # Let stack use Nix with the Nix we version here.
    pkgs.nix

    # Rust
    pkgs.rust-bin.stable.latest.default
    pkgs.rust-analyzer

    # Elixir
    pkgs.beam.packages.erlangR26.elixir
    pkgs.beam.packages.erlangR26.erlang # erl, escript
    pkgs.mix2nix

    # gRPC and Protocol Buffers
    pkgs.protobuf
    # Needed for running Elixir plugin for protoc. E.g., "protoc
    # --elixir_out=plugins=grpc:. foo.proto". We need to install
    # protoc-gen-elixir.
    protoc-gen-elixir

    # Tangling and weaving for Literate Programming.
    pkgs.emacs29-nox
    pkgs.inkscape
    pkgs.pdf2svg

    # For updating Nix dependencies.
    pkgs.niv

    # Misc
    pkgs.git
    pkgs.less
  ]
  # For file_system on Linux.
  ++ pkgs.lib.optional pkgs.stdenv.isLinux pkgs.inotify-tools
  # For file_system on macOS. See
  # https://elixirforum.com/t/could-not-compile-file-system-watcher-for-mac/17432/10
  # for a discussion about getting a file system watcher working on Mac.
  ++ pkgs.lib.optionals pkgs.stdenv.isDarwin (with pkgs.darwin.apple_sdk.frameworks; [
    CoreFoundation
    CoreServices
    Security
  ])
  ++ pkgs.lib.optionals pkgs.stdenv.isDarwin [
    # This allows mix2nix to be able to download hex packages using HTTPS, in a
    # `nix-shell --pure` environment. See
    # https://github.com/NixOS/nixpkgs/issues/66716#issuecomment-883399373.
    pkgs.cacert
    macOS-security
  ];

  # FIXME: how to get the git version into the environment...???? The setting below for MELBY_PROJECT_ROOT only works for the dev env, not the release env
  shellHook = ''
    # Prefer to use melbyr and melbyc from the local development tree path.
    export PATH=$PWD/daemon/test:$PWD/daemon/lib/melbyd/renderer:$PWD/client:$PATH
    export KUBECONFIG=$PWD/daemon/test/fake_kube_config
    export MELBY_DIR=$PWD/daemon/test/sample
    export MELBY_PROJECT_ROOT=$PWD
    export MELBYR_PATH=$PWD/daemon/lib/melbyd/renderer/melbyr
    export LUA_PATH="$PWD/daemon/test/sample/?.lua"
  '';

  # Configure the Nix path to our own `pkgs`, to ensure Stack-with-Nix uses the
  # correct one rather than the global <nixpkgs> when looking for the right
  # `ghc` argument to pass in `nix/stack.nix`
  #
  # See https://nixos.org/nixos/nix-pills/nix-search-paths.html for more
  # information.
  NIX_PATH = "nixpkgs=" + pkgs.path;

  # Make Elixir not complain about using "latin1" encoding.
  LANG = "C.UTF-8";
  LOCALE_ARCHIVE = pkgs.lib.optional pkgs.stdenv.isLinux
    "${pkgs.glibcLocales}/lib/locale/locale-archive";
} // darwin-cargo-build-rustflags)
#+end_src

**** Make Stack understand Nix

#+caption: package/nix/stack.nix
#+begin_src nix :tangle package/nix/stack.nix :eval no
let
  sources = import ./sources.nix;
  pkgs = import sources.nixpkgs { };
in

# See https://docs.haskellstack.org/en/stable/nix_integration/#using-a-custom-shellnix-file
#
# But basically this tells stack to figure out the GHC version by looking at
# stack.yaml (we have to have this file in $PWD from the current nix-shell
# session).
#
# This is really great because this means we can technically have different
# tools use different versions of GHC. So maybe one of the smaller, simpler
# tools can use the latest GHC with useful features and have that as a role
# model for the other Haskell binaries that are lagging behind on older GHC
# versions due to dependencies that have not yet upgraded to the newer version.
{ ghc }:

pkgs.haskell.lib.buildStackProject {
  inherit ghc;
  name = "melby";
  # System dependencies needed at compilation time
  buildInputs = [
    pkgs.zlib
  ];
}
#+end_src

** Packaging

*** Releasing

We use Nix to package everything up. The main thing to note here is that we
reuse the shell environment's sources (in =nix/sources.nix=) to make sure that
the development environment's dependencies exactly match what we'll end up
shipping.

#+caption: package/build.nix
#+begin_src nix :tangle package/build.nix :eval no
let
  sources = import ./nix/sources.nix;
  pkgs = import sources.nixpkgs {};
  # We have to explicitly choose GHC 8.10.7 because 9.0.2 is the default for
  # nixos-22.11 (which we don't want because the Stack version we use, LTS
  # 18.28, uses 8.10.7).
  hpg8107 = pkgs.haskell.packages.ghc8107;
  hpg96 = pkgs.haskell.packages.ghc96;
  melby-client = hpg8107.callPackage ../client/melby-client.nix {};
  melby-client-rust = pkgs.callPackage ../client-rust/melby-client-rust.nix {};
  # FIXME: We need to pass in a "version" attribute to all Haskell packages
  # because the default buildStackProject helper does not provide a version.
  # This means we need to start creating version strings, probably in the format
  # "YY.MM.DD-<sha>" to make it incremental.
  #melby-client-2 = (import melby-client-1) {};
  #melby-client-3 = pkgs.haskell.lib.addBuildTool melby-client-2 fakeGit;
  melby-renderer = hpg8107.callPackage ../daemon/lib/melbyd/renderer/melby-renderer.nix {};
  melby-daemon = pkgs.callPackage ../daemon/melby-daemon.nix {};
  melby-nifs = pkgs.callPackage ../daemon/lib/melbyd/nifs/melby-nifs.nix {};
in
  {
    inherit melby-client melby-client-rust melby-renderer melby-daemon melby-nifs;
  }
#+end_src

We can now install everything above with =nix-env -if ./release.nix=. Be sure to
run =systemctl --user daemon-reload= to load the =systemd= definition that comes
with =melby.service=, and run =systemctl --user start melby.service= to actually
start it.

#+caption: package/release.nix
#+begin_src nix :tangle package/release.nix :eval no
let
  sources = import ./nix/sources.nix;
  pkgs = import sources.nixpkgs {};
  melby = import ./build.nix;
in
  pkgs.symlinkJoin {
    name = "melby";
    paths = with melby; [
      melby-client
      melby-client-rust
      melby-renderer
      melby-daemon
    ];
    # If users have already installed individual packages already, make the ones
    # we bundle here act as a fallback. Default priority is 5, and so by setting
    # it to 10, makes Nix treat the files of this derivation as a fallback if
    # there is a conflict.
    meta.priority = 10;
  }
#+end_src

Additional steps:

Create a =~/.melby/systemd/env= file with the contents

FIXME: Add in "prod" settings here for MELBYR_PATH, MELBYR_PORT, and so on so as
to not conflict with the dev environment. Even better, add these settings in our
Elixir code so that the user does not (normally) have to configure them.

#+begin_example
RELEASE_COOKIE=path/to/cookie
#+end_example

Then populate =path/to/cookie= with a random text string like this:

#+begin_example
$ cd ~/.melby
$ openssl rand -base64 48 > cookie
$ chmod 600 cookie
#+end_example

*** Makefile

FIXME: reduce repetition by using a build rule (akin to run_emacs)

#+caption: package/Makefile
#+begin_src makefile :tangle package/Makefile

define run_build
	nix-build build.nix --option sandbox relaxed --show-trace \
		-A $(1) --out-link $(1)
endef

build:
	nix-build build.nix --option sandbox relaxed --show-trace

build-melby-client:
	$(call run_build,melby-client)

build-melby-client-rust:
	$(call run_build,melby-client-rust)

build-melby-daemon:
	$(call run_build,melby-daemon)

build-melby-nifs:
	$(call run_build,melby-nifs)

build-melby-renderer:
	$(call run_build,melby-renderer)

shell:
	nix-shell --pure

# Update nix/ folder to pin dependencies to nixos-23.11.
update-nix:
	niv update nixpkgs --branch nixos-23.11

.PHONY: build
.PHONY: build-melby-client
.PHONY: build-melby-client-rust
.PHONY: build-melby-renderer
.PHONY: build-melby-daemon
.PHONY: build-melby-nifs
.PHONY: shell
.PHONY: update-nix
#+end_src

*** .gitignore

#+caption: package/.gitignore
#+begin_src text :tangle package/.gitignore
melby-client
melby-client-rust
melby-nifs
melby-renderer
melby-daemon
result*
#+end_src
* How to hack on this project

First realize that this project uses literate programming. Because of this, you
must ensure that you can edit the Org files and make sure that those changes (to
the source code) can get tangled into source code locations for the various
compilers (=ghc=, =elixir=, etc) can consume.

The next most important thing is making sure that the =shell.nix= file at the
project root works (such that running =make shell= works). Run =make shell= to
enter the development environment.

You then need to stand up each individual Melby component.

** Building each component

*** =melbyr= (renderer; required by daemon)

#+begin_example
cd daemon/lib/melbyd/renderer; make
#+end_example

*** =melbyd= (daemon)

#+begin_example
cd daemon && make
#+end_example

And then to run the daemon, do

#+begin_example
cd daemon && make run_dev
#+end_example

There is also a =run-prod= rule but this won't work if you are already running a
packaged version of =melbyd= in your system, because they will both try to use
the same TCP port. So in that case you have to first stop the packaged version
you are running.

** =melbyc= (client)

#+begin_example
cd client; make
#+end_example

For invoking =melbyc= after building it, the simplest thing to do is to use the
provided =preview.sh= script in [[file:daemon/test/preview.sh][=daemon/test/preview.sh=]]. This script sets up
all necessary environment variables.

Note that currently the script uses a fake =kubectl=, because we don't want to
bother standing up a real Kubernetes instance in order to just test how
the real =kubectl= would behave. The script hardcodes the path to =melbyc= so
that it refers to the one that has been compiled inside the development
environment.

** Testing local changes

FIXME: How to do testing? What about integration tests? How to invoke tests? =mix test=?

** Common scenarios

*** Hacking on the Lua config

Make sure to use fakes, and to add validation tests. FIXME show examples.

* melbyc

We first examine the client to get a sense of how things work from the
perspective of the human user, who is expected to invoke =melbyc= somewhere in
their shell prompt generation logic. We then look at the pieces in the daemon to
see how it all works.

# We skip the first line with ":lines ..." because otherwise the "#+title: ..."
# of that document interferes our own title.
#+include: "client.org" :lines "16-"

** Rust client

# We skip the first line with ":lines ..." because otherwise the "#+title: ..."
# of that document interferes our own title.
#+include: "client-rust.org" :lines "16-"

* melbyd

# We skip the first line with ":lines ..." because otherwise the "#+title: ..."
# of that document interferes our own title.
#+include: "daemon.org" :lines "16-"

* Contributing to Melby

Thank you for showing interest in contributing back to this project!

But before we can accept your contributions, there are some things we have to
sort out.

** Code of conduct

You must adhere to the Code of Conduct (FIXME insert link).

** Where to make changes

Remember that the source of truth is in the =*.org= files. /Everything else is
generated code./ Editing the source code directly will not work at all because
tangling the =*.org= files will overwrite those changes.

** Focus on prose, not code

Remember that this project uses LP. LP requires /literate/ programs, and as
such, require everything to be explained in prose. If you make substantial
changes in code only without touching any of the surrounding prose, chances are
you are doing it wrong and your changes will not be accepted without extensive
revisions.

You must explain your changes in prose. Please try to explain things with simple
language, with simple words. And be as direct as possible. Avoid theatrics. Try
to explain things so that even inexperienced developers can understand.

It is completely normal for a Pull Request to go through /multiple rounds of
review/ before it is accepted.
